// <auto-generated />
using System;
using GondorsLegacy.Services.Reservation.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GondorsLegacy.Services.Reservation.Migrations.ReservationDb
{
    [DbContext(typeof(ReservationDbContext))]
    partial class ReservationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GondorsLegacy.Services.Reservation.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CancellationReason")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d4ad39b-fd9e-4be0-b493-289b020662ed"),
                            CancellationReason = 0,
                            CheckInDate = new DateTime(2023, 10, 17, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(250),
                            CheckOutDate = new DateTime(2023, 10, 25, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(280),
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerEmail = "yasin.salvator@gmail.com",
                            CustomerFirstName = "Yasin Çınar",
                            CustomerId = new Guid("f431d7b7-d24b-4656-a075-f4f2243a4583"),
                            CustomerLastName = "SALVATOR",
                            NumberOfAdults = 2,
                            NumberOfChildren = 0,
                            NumberOfGuests = 2,
                            PaymentStatus = 0,
                            ReservationStatus = 0,
                            RoomNumber = 501,
                            RoomType = 1,
                            SpecialRequests = "Internet mutlaka olmalıdır!",
                            TotalPrice = 17500.12m,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0a6e0a46-a030-4c2e-b3bc-d89b366019cc"),
                            CancellationReason = 0,
                            CheckInDate = new DateTime(2023, 10, 18, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(300),
                            CheckOutDate = new DateTime(2023, 10, 21, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(300),
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerEmail = "ahmet.cakar@gmail.com",
                            CustomerFirstName = "Ahmet ASLAN ",
                            CustomerId = new Guid("0b79449d-1f74-4df3-bf5a-1a7f4681fdd4"),
                            CustomerLastName = "ÇAKAR",
                            NumberOfAdults = 2,
                            NumberOfChildren = 1,
                            NumberOfGuests = 3,
                            PaymentStatus = 1,
                            ReservationStatus = 1,
                            RoomNumber = 502,
                            RoomType = 2,
                            SpecialRequests = "Çocuğum için klozete basamak koyulabilir mi?",
                            TotalPrice = 21500.00m,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b301e2c0-6b50-4894-8dec-17b84dee4841"),
                            CancellationReason = 0,
                            CheckInDate = new DateTime(2023, 10, 29, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(310),
                            CheckOutDate = new DateTime(2023, 11, 3, 14, 42, 39, 813, DateTimeKind.Local).AddTicks(310),
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerEmail = "ahmet.cakar@gmail.com",
                            CustomerFirstName = "Sibel",
                            CustomerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CustomerLastName = "SAĞLAM",
                            NumberOfAdults = 1,
                            NumberOfChildren = 0,
                            NumberOfGuests = 1,
                            PaymentStatus = 0,
                            ReservationStatus = 0,
                            RoomNumber = 503,
                            RoomType = 0,
                            SpecialRequests = "Sigara kullanılmayan oda olsun.",
                            TotalPrice = 1500.00m,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
